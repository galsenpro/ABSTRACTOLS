# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-29 09:27
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('abstract', '0019_auto_20170623_1506'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeStreamer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ex: NODEA1, NODEB1, etc..', max_length=100, verbose_name='Code du Streamer')),
                ('description', models.TextField(default='Description du streamer')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'enregistrement de ce streamer")),
            ],
            options={
                'verbose_name': 'Code Streamer',
                'verbose_name_plural': 'Codes Streamer',
            },
        ),
        migrations.CreateModel(
            name='TypeProfilManifest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeProfil', multiselectfield.db.fields.MultiSelectField(choices=[('dynamic', 'Depuis un mod\xe8le Manifest'), ('static', 'Enregistrer mon propre profil Manifest')], help_text='Choisir votre type de profil \xe0 charger pour les tests Manifests', max_length=14, verbose_name='Mode de profil')),
                ('createdProfil', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de cr\xe9ation du Profil Manifest')),
            ],
        ),
        migrations.AlterModelOptions(
            name='chaine',
            options={'verbose_name': 'Chaine', 'verbose_name_plural': 'Chaines du VSPP'},
        ),
        migrations.AlterModelOptions(
            name='listedepod',
            options={'verbose_name': 'Liste de Pods', 'verbose_name_plural': 'Listes de Pods'},
        ),
        migrations.AlterModelOptions(
            name='namechaine',
            options={'verbose_name': 'Nom de Chaine', 'verbose_name_plural': 'Noms de Chaines'},
        ),
        migrations.AlterModelOptions(
            name='namenode',
            options={'verbose_name': 'Noeud du VSPP ', 'verbose_name_plural': 'Noeuds du VSPP '},
        ),
        migrations.AlterModelOptions(
            name='namepod',
            options={'verbose_name': 'Pod du VSPP', 'verbose_name_plural': 'Pods du VSPP'},
        ),
        migrations.AlterModelOptions(
            name='response',
            options={'verbose_name': "Retour sur les tests de l'API VOD", 'verbose_name_plural': "Retour sur les tests de l'API VOD"},
        ),
        migrations.RemoveField(
            model_name='mode',
            name='client',
        ),
        migrations.RemoveField(
            model_name='namenode',
            name='description',
        ),
        migrations.AlterField(
            model_name='chaine',
            name='name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='abstract.NameChaine', verbose_name='Nom de la Chaine'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='commandesATraiter',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('live', 'LIVE'), ('catchup', 'CATCHUP'), ('startover', 'STARTOVER'), ('vodplayout', 'VOD PLAYOUT'), ('vodprepackaged', 'VOD PREPACKAGED'), ('ntc', 'NTC'), ('npvr', 'nPVR')], default='live', help_text='LIVE, CATCHUP, VOD, etc.', max_length=57, verbose_name='Commandes'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='emailFrom',
            field=models.EmailField(default='adama.dieng@orange.com', editable=False, max_length=254),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='intervalle',
            field=models.IntegerField(default=10, help_text='10s par d\xe9faut', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(5)], verbose_name="Tps d'intervalle de tests"),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='logdirectory',
            field=models.CharField(default='/home/adama/PROJET/ABSTRACT/AbstractBackend/logabstract', editable=False, help_text='Ce dossier contient le fichier de logs ABSTRACT', max_length=150, verbose_name='Dossier des logs ABSTRACT'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='logprefixname',
            field=models.CharField(default='abstractLog', help_text='Fichier log', max_length=50, verbose_name='Nom du fichier log ABSTRACT'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='modesATraiter',
            field=multiselectfield.db.fields.MultiSelectField(choices=[("['smooth': { 'staticabr': 'shss', 'fragment': '2', 'manifestsuffix': 'ism', device': 'SMOOTH_2S',client: null }]", 'SMOOTH'), ("['dash': { 'staticabr': 'sdash', 'fragment': '2', 'manifestsuffix': 'mpd', device': 'DASH_2S',client: null }]", 'DASH'), ("['hls': { 'staticabr': 'shls', 'fragment': '10', 'manifestsuffix': 'm3u8', device': 'HLS_LOW',client: null }]", 'HLS')], help_text='SMOOTH, DASH, HLS', max_length=332, verbose_name='Modes'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='nameConfig',
            field=models.CharField(help_text='Merci de donner un libelle explicite', max_length=100, verbose_name='Libell\xe9 de la config'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='port',
            field=models.IntegerField(default=5555, help_text='5555 pour VSPP MISTRAL', validators=[django.core.validators.MaxValueValidator(5555), django.core.validators.MinValueValidator(5555)], verbose_name='N\xb0 de port'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='protocole',
            field=models.CharField(choices=[('http', 'http'), ('https', 'https')], default='http', help_text="PS: MISTRAL utilise le protocole 'http'", max_length=5, verbose_name='Protocole utilis\xe9 par le VSPP'),
        ),
        migrations.AlterField(
            model_name='configuration',
            name='smsFrom',
            field=models.CharField(default='+33768225617', editable=False, max_length=13),
        ),
        migrations.AlterField(
            model_name='listedemode',
            name='name',
            field=models.CharField(help_text='Merci de mettre en \xe9vidence SMOOTH, DASH ou HLS si utilis\xe9', max_length=128, verbose_name='Nom du mode de streaming'),
        ),
        migrations.AlterField(
            model_name='listedepod',
            name='name',
            field=models.ForeignKey(blank=True, help_text='Libell\xe9 de la liste de pods ', null=True, on_delete=django.db.models.deletion.CASCADE, to='abstract.NamePod', verbose_name='Libell\xe9 de la liste'),
        ),
        migrations.AlterField(
            model_name='mode',
            name='deviceProfil',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('SMOOTH_2S', 'SMOOTH_2S pour le SMOOTH'), ('DASH_2S', 'DASH_2S pour le DASH'), ('HLS_LOW', 'HLS_LOW pour le HLS')], default='SMOOTH_2S', help_text='Le Device profil doit correspondre au mode choisi', max_length=25, verbose_name='Device profil'),
        ),
        migrations.AlterField(
            model_name='mode',
            name='fragment',
            field=models.IntegerField(default=2, help_text='2 pour SMOOTH | 2 ou 4 pour DASH | 10 pour HLS', validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(2)], verbose_name='Taille du fragment'),
        ),
        migrations.AlterField(
            model_name='mode',
            name='manifestSuffix',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('ism', 'ism pour le SMOOTH'), ('mpd', 'mpd pour le DASH'), ('m3u8', 'm3u8 pour le HLS')], default='ism', help_text='Le Manifest suffix doit correspondre au mode choisi', max_length=12, verbose_name='Manifest Suffix'),
        ),
        migrations.AlterField(
            model_name='mode',
            name='nameMode',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('smooth', 'SMOOTH'), ('dash', 'dash'), ('hls', 'HLS')], default='smooth', max_length=15, verbose_name='Nom du mode'),
        ),
        migrations.AlterField(
            model_name='mode',
            name='staticAbr',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('shss', 'shss pour le SMOOTH'), ('sdash', 'dash pour le DASH'), ('shls', 'shls pour le HLS')], default='shss', help_text='Le static abr doit correspondre au mode choisi', max_length=15, verbose_name='Static ABR'),
        ),
        migrations.AlterField(
            model_name='namechaine',
            name='created',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'enregistrement"),
        ),
        migrations.AlterField(
            model_name='namechaine',
            name='name',
            field=models.CharField(help_text='Ex: ARTE, CH_1, CH_2, etc.', max_length=100, verbose_name='Nom de la Chaine'),
        ),
        migrations.AlterField(
            model_name='namenode',
            name='name',
            field=models.ForeignKey(help_text='Voir Code Streamer', on_delete=django.db.models.deletion.CASCADE, to='abstract.CodeStreamer', verbose_name='Nom du streamer'),
        ),
        migrations.AlterField(
            model_name='request',
            name='datareq',
            field=models.TextField(help_text="Copier-coller le 'data' de la requ\xeate \xe0 tester", verbose_name='Le contenu XML de test'),
        ),
        migrations.AlterField(
            model_name='request',
            name='link',
            field=models.URLField(help_text='Exemple : http://192.168.134.3:5929/v2/fetch_file', verbose_name='Lien de test'),
        ),
        migrations.AlterField(
            model_name='request',
            name='nom',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('fetchfile', 'FETCH FILE'), ('TranscodingFiles', 'Transcoding Files'), ('CreateABRAsset', 'Create ABR Asset')], default='fetchfile', max_length=41, verbose_name='Nom de requ\xeate'),
        ),
        migrations.AlterField(
            model_name='response',
            name='body',
            field=models.TextField(help_text='Body', verbose_name='Contenu de la r\xe9ponse'),
        ),
        migrations.AlterField(
            model_name='response',
            name='datareq',
            field=models.TextField(help_text="Donn\xe9es d'entr\xe9e de test", verbose_name='Data'),
        ),
        migrations.AlterField(
            model_name='response',
            name='daterequest',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='La date est mise \xe0 jour apr\xe8s un test manuel', verbose_name='Date'),
        ),
        migrations.AlterField(
            model_name='response',
            name='link',
            field=models.URLField(help_text='Lien du test', verbose_name='Lien de test'),
        ),
        migrations.AlterField(
            model_name='response',
            name='methode',
            field=models.CharField(help_text='Ex : POST | GET ', max_length=100, verbose_name='Type requ\xeate'),
        ),
        migrations.AlterField(
            model_name='response',
            name='nom',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('fetchfile', 'FETCH FILE'), ('TranscodingFiles', 'Transcoding Files'), ('CreateABRAsset', 'Create ABR Asset')], default='fetchfile', help_text='Choisir un seul type', max_length=41, verbose_name='Nom de requ\xeate'),
        ),
        migrations.AlterField(
            model_name='response',
            name='reason',
            field=models.CharField(help_text='Ex: Not Found ', max_length=255, verbose_name='Raison du statut'),
        ),
        migrations.AlterField(
            model_name='response',
            name='status',
            field=models.CharField(help_text='200 | 400 | 401 |500 ...', max_length=10, verbose_name='Status du retour de test'),
        ),
        migrations.AlterField(
            model_name='response',
            name='typetest',
            field=models.CharField(default='auto', help_text='Automatique par d\xe9faut', max_length=6, verbose_name='Manuel|Auto'),
        ),
        migrations.AlterField(
            model_name='streamer',
            name='address',
            field=models.GenericIPAddressField(help_text='Ex: 192.168.134.65', protocol='ipv4', verbose_name='Adresse du Streamer'),
        ),
        migrations.AlterField(
            model_name='streamer',
            name='node',
            field=models.ForeignKey(blank=True, help_text='Nom du Noeud', null=True, on_delete=django.db.models.deletion.CASCADE, to='abstract.NameNode', verbose_name='Nom du noeud'),
        ),
        migrations.AlterField(
            model_name='vspp',
            name='name',
            field=models.CharField(default='MISTRAL', help_text='Ex: MISTRAL, le VSPP de test par d\xe9faut', max_length=250, unique=True, verbose_name='Nom du VSSP'),
        ),
    ]
